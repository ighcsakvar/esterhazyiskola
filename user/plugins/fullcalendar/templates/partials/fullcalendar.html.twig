<div id='legend'></div>
<div id='actMonth'></div>
<div id='calendar'></div>

<script>
	document.addEventListener('DOMContentLoaded', function() {
		var verbose = false;
		var defaultLocale = 'en';
		var weekNums = '{{ config.plugins.fullcalendar.weekNumbers }}';
		weekNums = (weekNums !== null) ? weekNums:false;
		var cfgLocale = '{{ config.plugins.fullcalendar.locale }}';
		var LocaleCode = (cfgLocale !== null) ? cfgLocale : defaultLocale;
		var cfgFilestring = '{{icsfile}}'; //	from FullCalendarShortCode.php, can now (from v 0.1.2) hold multiple ics Files, comma separated
		if (verbose) console.log('cfgfilestring:', cfgFilestring);
		var cfgfiles = cfgFilestring.split(','); // split string into multiple ics files, if appropriate, see note above
		var len = cfgfiles.length;
		if (verbose) console.log('cfgfiles[]:', cfgfiles);
		var BgColstring = '{{ config.plugins.fullcalendar.colors }}'; 	
		if (verbose) console.log('BgColstring:', BgColstring);
		var colors = BgColstring.split(',');
		var ncolors = colors.length;
		if (ncolors < len)	{	// populate colors with default color from fullcalendar.css
			colors = ['#3a87ad'];
			for (i=0; i<(len);i++)
				colors.push('#3a87ad');
		}
		if (verbose) console.log('colors[]:', colors);
		var showlegend = '{{ config.plugins.fullcalendar.showlegend }}';
		if (verbose)	console.log('showlegend:', showlegend);
		// page is now ready, initialize the calendar...
		var calendarEl = document.getElementById('calendar');
		var calendar = new FullCalendar.Calendar(calendarEl, {
			plugins: [ 'dayGrid', 'timeGrid', 'list' ],
      views: {
        dayGridWeek: {
          hiddenDays: [0,6],
          columnHeaderFormat: { weekday: 'short' },
          titleFormat: {month: 'short', day: '2-digit'}
        }
      },
      defaultView: $(window).width() < 765 ? 'listMonth':'listMonth',
			locale: LocaleCode,
      firstDay: 1,
			weekNumbers: weekNums,
      contentHeight: 'auto',
			header: {
        left: 'prev,next',
        center: $(window).width() < 756 ? 'title' : 'title',
        right: $(window).width() < 756 ? 'today' : 'today'
      },
			navLinks: false, // can click day/week names to navigate views
			editable: false,
			eventLimit: false, // allow "more" link when too many events
			fixedWeekCount: false,
			eventClick: function(info) {
				//info.jsEvent.preventDefault(); // don't let the browser navigate
        info.jsEvent.stopImmediatePropagation();
        if (info.event.extendedProps.description.indexOf('http://')!==-1) {
//				if (info.event.url) {
					window.open(info.event.extendedProps.description);	// open url in new Window/Tab
				}
			},
			//	Description as Tooltip (tippy.js) :
			eventRender: function(info) {
				if (info.event.extendedProps.description) {
					tippy (info.el, {
						content: info.event.extendedProps.description,
					});
				}
			},
			/*	this seems to work for test purposes:
			events: [
				{
					title: 'rrule event',
					rrule: {
						dtstart: '2019-08-09T13:00:00',
						byweekday: [Mo,We],
						freq: 'weekly'
					},
					duration: '02:00'
				}
			],
			*/
			events: function(info, successCallback, failureCallback) {
				var allevents = [];
				cfgfiles.forEach(function(value, index) {
					cfgFile = value;
					if (verbose) console.log('yaml CFG File:' + cfgFile);
					// allow remote ics files, full URL required
					if (cfgFile.startsWith("https://") || cfgFile.startsWith("http://")) {	// calendar URL is remote
						// automatically add CORS proxy URL for remote calendars, if not yet done 06.04.20
						var cors_api_url = 'https://cors-anywhere.herokuapp.com/';	// replace this if you prefer another CORS proxy !
						var origin = window.location.protocol + '//' + window.location.host;
						if (verbose) console.log('Origin:' + origin);
						if (cfgFile.startsWith(origin)) {
							if (verbose) console.log('remote is same Origin, do not use proxy');
							calendarUrl = cfgFile;
						}	else	{
							if (cfgFile.startsWith(cors_api_url)) {
								if (verbose) console.log('remote is different Origin, but cors URL already added, do not add in addition');
								calendarUrl = cfgFile;
							}	else	{
								if (verbose) console.log('remote is different Origin, use proxy');
								calendarUrl = cors_api_url + cfgFile;
							}
						}
					}   else    {
						calendarUrl = getAbsolutePath() + 'user/data/calendars/' + cfgFile;
					}
					if (verbose) console.log('Calendar URL:' + calendarUrl);
					var events = [];
					var do_callback = false; // muss zwingend hier hin, nicht ausserhalb der forEach schleife !!
					if (index == (len - 1)) {
						do_callback = true;
					}
					if (verbose) console.log('index,do_callback:', index, do_callback);
					jQuery.get(calendarUrl, function(data) {
						var jcalData = ICAL.parse(data);	//	directly parse data, no need to split to lines first ! 14.02.20
						var comp = new ICAL.Component(jcalData);
						var eventComps = comp.getAllSubcomponents("vevent");
						//	map them to FullCalendar events Objects
						events = jQuery.map(eventComps, function(item) {
							var fcevents = {};
							var entry = item.getFirstPropertyValue("summary");
							if (entry !== null)	fcevents["title"] = entry;
							var entry = item.getFirstPropertyValue("location");
							if (entry !== null)	fcevents["location"] = entry;
							var entry = item.getFirstPropertyValue("url");
							if (entry !== null)	fcevents["url"] = entry;
							var entry = item.getFirstPropertyValue("dtstart");
							if (entry !== null)	fcevents["start"] = entry.toJSDate();
							var entry = item.getFirstPropertyValue("dtend");
							if (entry !== null)	fcevents["end"] = entry.toJSDate();
							var entry = item.getFirstPropertyValue("description");	// add description 22.06.20
							if (entry !== null)	fcevents["description"] = entry;
							
							// not used options go here
							
							var rrules = item.getFirstPropertyValue("rrule");
							var fcrrules = {};	// extra object for rrules
							if (rrules !== null)	{
								if (rrules.freq !== null)	{	//	freq is required, do not continue if null
									fcrrules["freq"] = rrules.freq;
									if (verbose)	console.log('rrules:', rrules);	
									var parts = rrules["parts"];
									if (verbose)	console.log('parts:', parts);
									var byweekday = parts["BYDAY"];
									var weekdays = [];	// must be empty array, otherwise, push() will not work !
									var bysetpos = [];
									if (Array.isArray(byweekday))	{
										byweekday = parts["BYDAY"];
										for (i = 0; i < byweekday.length; i++) { 
											//	DONE: implement BYDAY n+ or n- 
											if (byweekday[i].match(/\d+/g))	{	// entry contains digits, save them to setpos, strip from weekdays
												var daynum = parseInt(byweekday[i]).toString();
												//	console.log('daynum: ' + daynum) ;
												bysetpos.push(daynum);
												weekdays.push(byweekday[i].replace(/[0-9,+,-]/g, ''));
											} else { weekdays.push(byweekday[i]); }	// no digits, just save to weekdays
										}
										byweekday = weekdays;
									}	else	{byweekday = null;}
									if (verbose)	console.log('byweekday:', byweekday);
									var byweekno = parts["BYWEEKNO"];
									if (Array.isArray(byweekno))	{byweekno = parts["BYWEEKNO"];}	else	{byweekno = null;}
									if (verbose)	console.log('byweekno:', byweekno);
									var bymonth = parts["BYMONTH"];
									if (Array.isArray(bymonth))	{bymonth = parts["BYMONTH"];}	else	{bymonth = null;}
									if (verbose)	console.log('bymonth:', bymonth);
									var bymonthday = parts["BYMONTHDAY"];
									if (Array.isArray(bymonthday))	{bymonthday = parts["BYMONTHDAY"];}	else	{bymonthday = null;}
									if (verbose)	console.log('bymonthday:', bymonthday);
									var byyearday = parts["BYYEARDAY"];
									if (Array.isArray(byyearday))	{byyearday = parts["BYYEARDAY"];}	else	{byyearday = null;}
									if (verbose)	console.log('byyearday:', byyearday);
									if (rrules.dtstart !== undefined)	{fcrrules["dtstart"] = rrules.dtstart;}	else	{fcrrules["dtstart"] = fcevents["start"];}
									if (byweekday !== null) { fcrrules["byweekday"] = byweekday;}
									if (bysetpos !== null) { fcrrules["bysetpos"] = bysetpos;}
									if (byweekno !== null) { fcrrules["byweekno"] = byweekno;}
									if (bymonth !== null) { fcrrules["bymonth"] = bymonth;}
									if (bymonthday !== null) { fcrrules["bymonthday"] = bymonthday;}
									if (byyearday !== null) { fcrrules["byyearday"] = byyearday;}
									if (rrules.interval != null) { fcrrules["interval"] = rrules.interval;}
									if (rrules.count != null) { fcrrules["count"] = rrules.count;}
									if (rrules.wkst != null) { fcrrules["wkst"] = rrules.wkst;}
									if (rrules.until != null) { fcrrules["until"] = rrules.until.toJSDate();}
									fcevents["rrule"] = fcrrules;
									if (verbose)	console.log('fcrrules:', fcrrules);
								}
							}
							fcevents["backgroundColor"] = colors[index];
							if (verbose)	console.log('fcevents:', fcevents);
							if (item.getFirstPropertyValue("class") === "PRIVATE") {
								return null;
							} else {
								return fcevents;
							} 
						})
						jQuery.merge(allevents, events);
						if (verbose) console.log('index,do_callback:', index, do_callback);
						if (verbose) console.log('events:', events);
						if (do_callback) {
							successCallback(allevents);	// wichtig !!
							if (verbose) console.log('allevents:', allevents);
						}
					}, 
					'text');
				})
			}
		});
		calendar.render();
		// show legend, if enabled
		if (showlegend) {
			// Add the contents of cfgfiles to #legend:
			document.getElementById('legend').appendChild(makeUL(cfgfiles, colors));
		}
	})
	
	function makeUL(array, colors) {
		// Create the list element:
		var list = document.createElement('ul');
		// assign css class
		list.classList.add('cal_legend');
		for (var i = 0; i < array.length; i++) {
			// Create the list item:
			var item = document.createElement('li');
			
			// Set its contents:
			item.appendChild(document.createTextNode(array[i]));
			item.style.color = colors[i];
			
			// Add it to the list:
			list.appendChild(item);
		}
		// Finally, return the constructed list:
		return list;
	}

	function getAbsolutePath() { // see https://www.sitepoint.com/jquery-current-page-url/
		var loc = window.location;
		var pathName = loc.pathname.substring(0, loc.pathname.lastIndexOf('/') + 1);
		return loc.href.substring(0, loc.href.length - ((loc.pathname + loc.search + loc.hash).length - pathName.length));
	}
	
</script>
